name: Build, Deploy, and Setup EC2

on:
  workflow_call:
    inputs:
      env:
        description: "Environment (qa or production)"
        required: true
      tag:
        description: "Docker tag (e.g., latest)"
        required: true
      ec2_hosts:
        description: "Comma-separated list of EC2 hosts"
        required: true
      ec2_key:
        description: "SSH private key"
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ inputs.tag }} .
          docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ inputs.tag }}

  setup-and-deploy:
    needs: build-and-push
    strategy:
      matrix:
        host: ${{ inputs.ec2_hosts }}

    runs-on: ubuntu-latest

    steps:
      - name: SSH into EC2 and Setup Docker
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ matrix.host }}
          username: ubuntu
          key: ${{ inputs.ec2_key }}
          script: |
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              sudo systemctl restart docker
            else
              echo "Docker already installed."
            fi
            
            # Ensure Docker is running
            if ! sudo systemctl is-active --quiet docker; then
              sudo systemctl start docker
            fi

            # Pull the latest image and deploy
            sudo docker pull ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ inputs.tag }}
            sudo docker stop $(docker ps -q) || true
            sudo docker rm $(docker ps -aq) || true
            sudo docker run -d --name ${{ env.APP_NAME }} -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ inputs.tag }}
