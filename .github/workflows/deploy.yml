name: EC2 deploy from docker

on:
  push:
    branches: ["QA"]
  pull_request:
    branches: ["main"]

env:
  DOCKER_REGISTRY: ghcr.io
  APP_NAME: nodewebapp
  APP_PORT: 5454

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: ["QA", "PRODUCTION"]

    steps:
      - name: Set Environment Variables
        run: |
          if [[ "${{ matrix.environment }}" == "QA" ]]; then
            echo "EC2_HOSTS=${{ secrets.EC2_HOSTS_QA }}" >> $GITHUB_ENV
            echo "EC2_KEY=${{ secrets.EC2_KEY_QA }}" >> $GITHUB_ENV
            echo "TAG=latest" >> $GITHUB_ENV
          elif [[ "${{ matrix.environment }}" == "PRODUCTION" ]]; then
            echo "EC2_HOSTS=${{ secrets.EC2_HOSTS_PRD }}" >> $GITHUB_ENV
            echo "EC2_KEY=${{ secrets.EC2_KEY_PRD }}" >> $GITHUB_ENV
            echo "TAG=latest" >> $GITHUB_ENV
          fi

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.TAG }} .
          docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.TAG }}

      - name: Deploy to EC2 Instances
        run: |
          IFS=',' read -ra HOSTS <<< "${{ env.EC2_HOSTS }}"
          for HOST in "${HOSTS[@]}"; do
            echo "Deploying to $HOST"
            ssh -o StrictHostKeyChecking=no -i ${{ env.EC2_KEY }} ubuntu@$HOST "
              if ! command -v docker &> /dev/null; then
                sudo apt update && sudo apt install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker \$USER
                sudo systemctl restart docker
              fi

              if ! sudo systemctl is-active --quiet docker; then
                sudo systemctl start docker
              fi

              sudo docker pull ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.TAG }}
              sudo docker stop \$(docker ps -q) || true
              sudo docker rm \$(docker ps -aq) || true
              sudo docker run -d --name ${{ env.APP_NAME }} -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.TAG }}
            "
          done



